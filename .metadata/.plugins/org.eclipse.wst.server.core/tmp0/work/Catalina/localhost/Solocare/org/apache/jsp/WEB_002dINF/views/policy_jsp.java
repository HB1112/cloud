/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.97
 * Generated at: 2024-12-26 08:15:22 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class policy_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/WEB-INF/views/menu.jsp", Long.valueOf(1735173565156L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>정책 검색</title>\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\r\n");
      out.write("<script src=\"https://kit.fontawesome.com/70c60afc84.js\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"resources/css/policy.css\" />\r\n");
      out.write("<script>\r\n");
      out.write("    $(document).ready(function() {\r\n");
      out.write("        var selectedBizTypes = []; // 선택된 정책 분야\r\n");
      out.write("        var selectedRegions = [];   // 선택된 지역\r\n");
      out.write("        var currentPageIndex = 1;   // 현재 페이지 인덱스\r\n");
      out.write("        var itemsPerPage = 10;      // 페이지당 항목 수\r\n");
      out.write("        var totalPageCount;         // 전체 페이지 수\r\n");
      out.write("\r\n");
      out.write("        // 전체 정책 목록 로드 함수\r\n");
      out.write("        function loadAllPolicies(pageIndex = 1) {\r\n");
      out.write("            $.ajax({\r\n");
      out.write("                url: '/Solocare/policy/search',\r\n");
      out.write("                type: 'GET',\r\n");
      out.write("                data: {\r\n");
      out.write("                    query: '', // 빈 쿼리로 전체 목록 요청\r\n");
      out.write("                    srchPolyBizSecd: '',\r\n");
      out.write("                    bizTycdSel: '',\r\n");
      out.write("                    pageIndex: pageIndex // 페이지 인덱스 추가\r\n");
      out.write("                },\r\n");
      out.write("                contentType: 'application/json;charset=UTF-8',\r\n");
      out.write("                success: function(response) {\r\n");
      out.write("                    try {\r\n");
      out.write("                        var data = (typeof response === 'string') ? JSON.parse(response) : response;\r\n");
      out.write("                        console.log('Received all policies:', data);\r\n");
      out.write("                        displayPolicies(data); // 전체 정책 목록 표시\r\n");
      out.write("                        totalPageCount = Math.ceil(data.youthPolicyList.totalCnt / itemsPerPage);\r\n");
      out.write("                        setupPagination(); // 페이지네이션 설정\r\n");
      out.write("                    } catch (e) {\r\n");
      out.write("                        console.error('Error:', e);\r\n");
      out.write("                        $('#result').html('<p>데이터 처리 중 오류가 발생했습니다: ' + e.message + '</p>');\r\n");
      out.write("                    }\r\n");
      out.write("                },\r\n");
      out.write("                error: function(xhr, status, error) {\r\n");
      out.write("                    $('#result').html('<p>오류가 발생했습니다. 상태: ' + status + ', 메시지: ' + error + '</p>');\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // 페이지네이션 설정 함수\r\n");
      out.write("        function setupPagination() {\r\n");
      out.write("		    var paginationHtml = '';\r\n");
      out.write("		    var pageGroupSize = 10; // 한 번에 표시할 페이지 수\r\n");
      out.write("		    var startPage = Math.floor((currentPageIndex - 1) / pageGroupSize) * pageGroupSize + 1; // 시작 페이지\r\n");
      out.write("		    var endPage = Math.min(startPage + pageGroupSize - 1, totalPageCount); // 끝 페이지\r\n");
      out.write("		\r\n");
      out.write("		    // 이전 버튼\r\n");
      out.write("		    if (startPage > 1) {\r\n");
      out.write("		        paginationHtml += '<button class=\"page-button\" data-page=\"' + (startPage - 1) + '\">이전</button>';\r\n");
      out.write("		    }\r\n");
      out.write("		\r\n");
      out.write("		    // 페이지 번호 버튼\r\n");
      out.write("		    for (var i = startPage; i <= endPage; i++) {\r\n");
      out.write("		        paginationHtml += '<button class=\"page-button\" data-page=\"' + i + '\"' + \r\n");
      out.write("		                          (i === currentPageIndex ? ' style=\"font-weight:bold;\"' : '') + '>' + \r\n");
      out.write("		                          i + '</button>';\r\n");
      out.write("		    }\r\n");
      out.write("		\r\n");
      out.write("		    // 다음 버튼\r\n");
      out.write("		    if (endPage < totalPageCount) {\r\n");
      out.write("		        paginationHtml += '<button class=\"page-button\" data-page=\"' + (endPage + 1) + '\">다음</button>';\r\n");
      out.write("		    }\r\n");
      out.write("		\r\n");
      out.write("		    $('#pagination').html(paginationHtml); // 페이지 버튼 추가\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        // 페이지 버튼 클릭 시 해당 페이지 데이터 요청\r\n");
      out.write("        $(document).on('click', '.page-button', function() {\r\n");
      out.write("            currentPageIndex = $(this).data('page'); // 현재 페이지 인덱스 업데이트\r\n");
      out.write("            loadAllPolicies(currentPageIndex); // 현재 페이지 인덱스를 사용하여 정책 목록 로드\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        $('#searchButton').click(function() {\r\n");
      out.write("            var query = $('#searchInput').val();\r\n");
      out.write("\r\n");
      out.write("            // API 요청 파라미터 준비\r\n");
      out.write("            var params = {\r\n");
      out.write("                query: query,\r\n");
      out.write("                srchPolyBizSecd: selectedRegions.length > 0 ? selectedRegions.join(',') : '',\r\n");
      out.write("                bizTycdSel: selectedBizTypes.length > 0 ? selectedBizTypes.join(',') : '',\r\n");
      out.write("                pageIndex: currentPageIndex // 현재 페이지 인덱스 포함\r\n");
      out.write("            };\r\n");
      out.write("\r\n");
      out.write("            // 파라미터를 콘솔에 출력\r\n");
      out.write("            console.log('AJAX 요청 파라미터:', params);\r\n");
      out.write("\r\n");
      out.write("            $.ajax({\r\n");
      out.write("                url: '/Solocare/policy/search',\r\n");
      out.write("                type: 'GET',\r\n");
      out.write("                data: params,\r\n");
      out.write("                contentType: 'application/json;charset=UTF-8',\r\n");
      out.write("                success: function(response) {\r\n");
      out.write("                    try {\r\n");
      out.write("                        var data = (typeof response === 'string') ? JSON.parse(response) : response;\r\n");
      out.write("                        console.log('Received data:', data);\r\n");
      out.write("\r\n");
      out.write("                        if (!data || !data.youthPolicyList || !data.youthPolicyList.youthPolicy) {\r\n");
      out.write("                            $('#result').html('<p>검색 결과가 없습니다.</p>');\r\n");
      out.write("                            return;\r\n");
      out.write("                        }\r\n");
      out.write("\r\n");
      out.write("                        displayPolicies(data); // 결과 표시 함수 호출\r\n");
      out.write("                        totalPageCount = Math.ceil(data.youthPolicyList.totalCnt / itemsPerPage);\r\n");
      out.write("                        setupPagination(); // 페이지네이션 설정\r\n");
      out.write("                    } catch (e) {\r\n");
      out.write("                        console.error('Error:', e);\r\n");
      out.write("                        $('#result').html('<p>데이터 처리 중 오류가 발생했습니다: ' + e.message + '</p>');\r\n");
      out.write("                    }\r\n");
      out.write("                },\r\n");
      out.write("                error: function(xhr, status, error) {\r\n");
      out.write("                    $('#result').html('<p>오류가 발생했습니다. 상태: ' + status + ', 메시지: ' + error + '</p>');\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        // 정책 목록 표시 함수\r\n");
      out.write("        function displayPolicies(data) {\r\n");
      out.write("            var policies = data.youthPolicyList.youthPolicy;\r\n");
      out.write("            if (!policies) {\r\n");
      out.write("                $('#result').html('<p>검색 결과가 없습니다.</p>');\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            // 단일 결과일 경우 배열로 변환\r\n");
      out.write("            if (!Array.isArray(policies)) {\r\n");
      out.write("                policies = [policies];\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            var html = '<table class=\"policy-board\">';\r\n");
      out.write("            html += '<thead><tr>';\r\n");
      out.write("            html += '<th>번호</th>';\r\n");
      out.write("            html += '<th>정책명</th>';\r\n");
      out.write("            html += '<th>지역</th>';\r\n");
      out.write("            html += '<th>신청기간</th>';\r\n");
      out.write("            html += '<th>정원</th>';\r\n");
      out.write("            html += '</tr></thead><tbody>';\r\n");
      out.write("\r\n");
      out.write("            policies.forEach(function(policy) {\r\n");
      out.write("                html += '<tr>';\r\n");
      out.write("                html += '<td>' + policy.rnum + '</td>';\r\n");
      out.write("                html += '<td><div class=\"policy-title\" onclick=\"toggleDetail(' + policy.rnum + ')\">' + \r\n");
      out.write("                        policy.polyBizSjnm + '</div>';\r\n");
      out.write("                html += '<div id=\"detail-' + policy.rnum + '\" class=\"policy-detail\" style=\"display:none;\">';\r\n");
      out.write("                html += '<div class=\"detail-grid\">';\r\n");
      out.write("                html += createDetailItem('정책 소개', policy.polyItcnCn);\r\n");
      out.write("                html += createDetailItem('지원 내용', policy.sporCn);\r\n");
      out.write("                html += createDetailItem('지원 규모', policy.sporScvl);\r\n");
      out.write("                html += createDetailItem('신청 자격', policy.prcpCn);\r\n");
      out.write("                html += createDetailItem('연령', policy.ageInfo);\r\n");
      out.write("                html += createDetailItem('전공', policy.majrRqisCn);\r\n");
      out.write("                html += createDetailItem('취업상태', policy.empmSttsCn);\r\n");
      out.write("                html += createDetailItem('신청 방법', policy.rqutProcCn);\r\n");
      out.write("                if (policy.rqutUrla && policy.rqutUrla !== 'null') {\r\n");
      out.write("                     html += createDetailItem('신청 링크', '<a href=\"' + policy.rqutUrla + '\" target=\"_blank\">바로가기</a>');\r\n");
      out.write("                }\r\n");
      out.write("                html += createDetailItem('문의처', policy.cherCtpcCn);\r\n");
      out.write("                html += '</div></div></td>';\r\n");
      out.write("                html += '<td>' + getRegionName(policy.polyBizSecd) + '</td>';\r\n");
      out.write("                html += '<td>' + formatPeriod(policy.rqutPrdCn) + '</td>';\r\n");
      out.write("                html += '<td>' + policy.sporScvl + '</td>';\r\n");
      out.write("                html += '</tr>';\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("            html += '</tbody></table>';\r\n");
      out.write("            $('#result').html(html);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // 상세 정보 표시 함수\r\n");
      out.write("        function createDetailItem(label, value) {\r\n");
      out.write("            if (!value || value === 'null') return '';\r\n");
      out.write("            return '<div class=\"detail-item\"><strong>' + label + ':</strong> ' + value + '</div>';\r\n");
      out.write("        }\r\n");
      out.write("    	 // 지역 코드 변환 함수\r\n");
      out.write("        function getRegionName(code) {\r\n");
      out.write("            const regionCodes = {\r\n");
      out.write("                '003002001': '서울', \r\n");
      out.write("                '003002002': '부산', \r\n");
      out.write("                '003002003': '대구',\r\n");
      out.write("                '003002004': '인천', \r\n");
      out.write("                '003002005': '광주', \r\n");
      out.write("                '003002006': '대전',\r\n");
      out.write("                '003002007': '울산', \r\n");
      out.write("                '003002008': '경기', \r\n");
      out.write("                '003002009': '강원',\r\n");
      out.write("                '003002010': '충북', \r\n");
      out.write("                '003002011': '충남', \r\n");
      out.write("                '003002012': '전북',\r\n");
      out.write("                '003002013': '전남', \r\n");
      out.write("                '003002014': '경북', \r\n");
      out.write("                '003002015': '경남',\r\n");
      out.write("                '003002016': '제주', \r\n");
      out.write("                '003002017': '세종'\r\n");
      out.write("            };\r\n");
      out.write("            return regionCodes[code.substring(0, 9)] || '기타';\r\n");
      out.write("        }\r\n");
      out.write("     	// 신청기간 포맷팅 함수\r\n");
      out.write("        function formatPeriod(period) {\r\n");
      out.write("            if (!period || period === 'null') return '-';\r\n");
      out.write("            return period.split('\\r')[0];\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // 페이지 로딩 시 전체 정책 목록 요청\r\n");
      out.write("        loadAllPolicies();\r\n");
      out.write("        \r\n");
      out.write("        \r\n");
      out.write("        $('.selection-button').click(function() {\r\n");
      out.write("            var value = $(this).data('value');\r\n");
      out.write("\r\n");
      out.write("            // 버튼의 선택 상태를 토글\r\n");
      out.write("            $(this).toggleClass('selected');\r\n");
      out.write("\r\n");
      out.write("            // 선택된 값 관리\r\n");
      out.write("            if ($(this).hasClass('selected')) {\r\n");
      out.write("                // 선택된 값 추가\r\n");
      out.write("                if ($(this).closest('div').index() === 1) { // 정책 분야\r\n");
      out.write("                    selectedBizTypes.push(value);\r\n");
      out.write("                } else { // 지역\r\n");
      out.write("                    selectedRegions.push(value);\r\n");
      out.write("                }\r\n");
      out.write("            } else {\r\n");
      out.write("                // 선택 해제된 값 제거\r\n");
      out.write("                if ($(this).closest('div').index() === 1) { // 정책 분야\r\n");
      out.write("                    selectedBizTypes = selectedBizTypes.filter(function(v) { return v !== value; });\r\n");
      out.write("                } else { // 지역\r\n");
      out.write("                    selectedRegions = selectedRegions.filter(function(v) { return v !== value; });\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("    });\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<nav class=\"navbar navbar-expand-lg navbar-light fixed-top\">\r\n");
      out.write("         ");
      out.write("\r\n");
      out.write("   <style>\r\n");
      out.write("        body {\r\n");
      out.write("            font-family: 'Noto Sans', sans-serif;\r\n");
      out.write("        }\r\n");
      out.write("        .navbar {\r\n");
      out.write("            background-color: white; \r\n");
      out.write("            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n");
      out.write("        }\r\n");
      out.write("        .navbar-brand {\r\n");
      out.write("            font-family: 'Noto Serif', serif;\r\n");
      out.write("            font-size: 1.8rem;\r\n");
      out.write("            font-weight: bold;\r\n");
      out.write("            color: #005B96;\r\n");
      out.write("            transition: transform 0.3s ease;\r\n");
      out.write("        }\r\n");
      out.write("        .navbar-brand:hover {\r\n");
      out.write("            transform: scale(1.1);\r\n");
      out.write("        }\r\n");
      out.write("        .navbar-nav .nav-link {\r\n");
      out.write("            margin: 0 15px;\r\n");
      out.write("            color: #005B96; \r\n");
      out.write("            font-weight: 500;\r\n");
      out.write("            transition: all 0.3s ease;\r\n");
      out.write("        }\r\n");
      out.write("        .navbar-nav .nav-link:hover {\r\n");
      out.write("            color: #FFD700; \r\n");
      out.write("            transform: translateY(-3px);\r\n");
      out.write("        }\r\n");
      out.write("        .dropdown-menu {\r\n");
      out.write("            background: #f8f9fa; \r\n");
      out.write("            border: none;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n");
      out.write("        }\r\n");
      out.write("        .dropdown-item {\r\n");
      out.write("            color: #005B96; \r\n");
      out.write("            font-weight: 500;\r\n");
      out.write("        }\r\n");
      out.write("        .dropdown-item:hover {\r\n");
      out.write("            background: #005B96; \r\n");
      out.write("            color: white; \r\n");
      out.write("        }\r\n");
      out.write("        .search {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            margin-left: auto; /* 오른쪽 끝으로 붙이기 */\r\n");
      out.write("        }\r\n");
      out.write("        .search input {\r\n");
      out.write("            border-radius: 30px;\r\n");
      out.write("            border: 2px solid #005B96; \r\n");
      out.write("            margin-right: 10px; /* 검색창과 버튼 사이 간격 */\r\n");
      out.write("        }\r\n");
      out.write("        .search button {\r\n");
      out.write("            color: white;\r\n");
      out.write("            background: #005B96; \r\n");
      out.write("            border-radius: 50%;\r\n");
      out.write("            border: none;\r\n");
      out.write("            padding: 5px 10px;\r\n");
      out.write("        }\r\n");
      out.write("        .user-links {\r\n");
      out.write("        	display : flex;\r\n");
      out.write("            margin-left: 20px; /* 로그인/회원가입 간격 */\r\n");
      out.write("        }\r\n");
      out.write("        .main-content {\r\n");
      out.write("            margin-top: 80px; /* 내비게이션 바 높이에 맞춰 여백 추가 */\r\n");
      out.write("        }\r\n");
      out.write("        .navbar-collapse {\r\n");
      out.write("		    display: flex;\r\n");
      out.write("		    justify-content: space-between; /* 양쪽 끝으로 배치 */\r\n");
      out.write("		    width: 100%; /* 전체 너비 사용 */\r\n");
      out.write("		}\r\n");
      out.write("    </style>\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("\r\n");
      out.write("<nav class=\"navbar navbar-expand-lg navbar-light fixed-top\" style=\"font-family: 'Montserrat', sans-serif;\">\r\n");
      out.write("    <a class=\"navbar-brand\" href=\"/Solocare/home\">Solo Care</a>\r\n");
      out.write("    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n");
      out.write("        <span class=\"navbar-toggler-icon\"></span>\r\n");
      out.write("    </button>\r\n");
      out.write("    <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n");
      out.write("        <ul class=\"navbar-nav\">\r\n");
      out.write("            <li class=\"nav-item\">\r\n");
      out.write("                <a class=\"nav-link\" href=\"/Solocare/search\">쇼핑</a>\r\n");
      out.write("            </li>\r\n");
      out.write("             <li class=\"nav-item\">\r\n");
      out.write("                <a class=\"nav-link\" href=\"/Solocare/club/board\">동호회</a>\r\n");
      out.write("            </li>\r\n");
      out.write("            <li class=\"nav-item dropdown\">\r\n");
      out.write("                <a class=\"nav-link\" href=\"/Solocare/community\">커뮤니티</a>\r\n");
      out.write("            </li>\r\n");
      out.write("            <li class=\"nav-item dropdown\">\r\n");
      out.write("                <a class=\"nav-link\" href=\"/Solocare/policy\">정책</a>\r\n");
      out.write("            </li>\r\n");
      out.write("        </ul>\r\n");
      out.write("\r\n");
      out.write("        ");

            if (request.getSession().getAttribute("mem") != null) {
        
      out.write("\r\n");
      out.write("            <div class=\"user-links\">\r\n");
      out.write("                <p>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${mem.name}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("님 환영합니다</p>\r\n");
      out.write("                <a href=\"/Solocare/infocheck\" class=\"nav-link\">내 정보</a>\r\n");
      out.write("                <a href=\"/Solocare/logout\" class=\"nav-link\">로그아웃</a>\r\n");
      out.write("                <a href=\"/Solocare/list\" class=\"nav-link\">일정관리</a>\r\n");
      out.write("            </div>\r\n");
      out.write("        ");

            } else {
        
      out.write("\r\n");
      out.write("            <div class=\"user-links\">\r\n");
      out.write("                <a href=\"/Solocare/login\" class=\"nav-link\">로그인</a>\r\n");
      out.write("            </div>\r\n");
      out.write("        ");

            }
        
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("</nav>\r\n");
      out.write("\r\n");
      out.write("    </nav>\r\n");
      out.write("    <div class=\"search-container\">\r\n");
      out.write("        <h1>청년 정책 검색</h1>\r\n");
      out.write("        <div class=\"search-controls\">\r\n");
      out.write("		    <div class=\"search-input-container\">\r\n");
      out.write("		        <h3><i class=\"fa-solid fa-magnifying-glass\"></i> 정책 이름 및 내용 </h3>\r\n");
      out.write("		        <input type=\"text\" id=\"searchInput\" placeholder=\"정책 이름 및 내용 검색\">\r\n");
      out.write("		    </div>\r\n");
      out.write("            <div>\r\n");
      out.write("                <h3><i class=\"fa-solid fa-magnifying-glass\"></i> 정책 분야 </h3>\r\n");
      out.write("                <button class=\"selection-button\" data-value=\"023010\">일자리 분야</button>\r\n");
      out.write("                <button class=\"selection-button\" data-value=\"023020\">주거 분야</button>\r\n");
      out.write("                <button class=\"selection-button\" data-value=\"023030\">교육 분야</button>\r\n");
      out.write("                <button class=\"selection-button\" data-value=\"023040\">복지.문화 분야</button>\r\n");
      out.write("                <button class=\"selection-button\" data-value=\"023050\">참여.권리 분야</button>\r\n");
      out.write("            </div>\r\n");
      out.write("        \r\n");
      out.write("            <div>\r\n");
      out.write("                <div>\r\n");
      out.write("                	<h3><i class=\"fa-solid fa-magnifying-glass\"></i> 지역</h3>\r\n");
      out.write("                </div>\r\n");
      out.write("                <button class=\"selection-button\" data-value=\"003002001\">서울</button>\r\n");
      out.write("                <button class=\"selection-button\" data-value=\"003002002\">부산</button>\r\n");
      out.write("                <button class=\"selection-button\" data-value=\"003002003\">대구</button>\r\n");
      out.write("                <button class=\"selection-button\" data-value=\"003002004\">인천</button>\r\n");
      out.write("                <button class=\"selection-button\" data-value=\"003002005\">광주</button>\r\n");
      out.write("                <button class=\"selection-button\" data-value=\"003002006\">대전</button>\r\n");
      out.write("                <button class=\"selection-button\" data-value=\"003002007\">울산</button>\r\n");
      out.write("                <button class=\"selection-button\" data-value=\"003002008\">경기</button>\r\n");
      out.write("                <button class=\"selection-button\" data-value=\"003002009\">강원</button>\r\n");
      out.write("                <button class=\"selection-button\" data-value=\"003002010\">충북</button>\r\n");
      out.write("                <button class=\"selection-button\" data-value=\"003002011\">충남</button>\r\n");
      out.write("                <button class=\"selection-button\" data-value=\"003002012\">전북</button>\r\n");
      out.write("                <button class=\"selection-button\" data-value=\"003002013\">전남</button>\r\n");
      out.write("                <button class=\"selection-button\" data-value=\"003002014\">경북</button>\r\n");
      out.write("                <button class=\"selection-button\" data-value=\"003002015\">경남</button>\r\n");
      out.write("                <button class=\"selection-button\" data-value=\"003002016\">제주</button>\r\n");
      out.write("                <button class=\"selection-button\" data-value=\"003002017\">세종</button>\r\n");
      out.write("            </div>\r\n");
      out.write("        \r\n");
      out.write("            <button id=\"searchButton\">검색</button>\r\n");
      out.write("        </div>\r\n");
      out.write("        \r\n");
      out.write("    </div>\r\n");
      out.write("    <div id=\"result\"></div>\r\n");
      out.write("    <div id=\"pagination\" class=\"pagination-controls\"></div> <!-- 페이지네이션 추가 -->\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
